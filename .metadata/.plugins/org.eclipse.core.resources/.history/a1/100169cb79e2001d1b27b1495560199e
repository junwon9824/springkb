

Java SE - JDBC - Servlet - JSP - Distributed Computing
분산처리(RMI) -> EJB(Enterprise Java Beans)
EJB 서버제품 -> 동작 느렸음(스펙대로 구현)
EJB 선언적인 컴포넌트 (표준 SQL자동생성 기능 제공 - CRUD)
로드존슨 EJB중 핵심기능만. EJB없이 구현방법 제시

스프링 >> 객체 생성 후 사용.


클래스 4가지 종류
1. VO, DTO : 저장용 객체
2. DAO : VO 관리용 객체(CRUD)
3. UI :
4. IO :

VO, DTO는 각 개체가 다른 정보를 갖고 있다. 
DAO, UI, IO는 한개만 필요. 빈번한 기능변경 요구


Dependency Injection 디자인 패턴
객체 등록 후 검색할 때 필요한 타입으로 제공

(1)
BoardDao dao = new BoardDao(); -> BoardDao가 변경이 필요할 때 많은 수정이 필요하다. 이를 해결하기 위해
-----------------------------------------------------------------------------------------
(2)
benas.xml에 클래스를 등록
<beans>
	<bean id="bdao" class="BoardDao"></bean>
</beans>

XML을 읽어 객체를 만들어 저자하는 컨테이너 생성
XmlApplicationContext ctx = new XmlApplicationContext();
BoardDao dao = ctx.getBean("bdao");

dao 수정할 일 생기는 경우!!

BoardDao의 업버전 개발 BoardDao2. BoardDao 상속
<beans>
	<bean id="bdao" class="BoardDao2"></bean>
</beans>
XmlApplicationContext ctx = new XmlApplicationContext();
BoardDao dao = ctx.getBean("bdao"); // BoardDao의 자식객체(BoardDao2) 반환. 다형성 이용!

-----------------------------------------------------------------------------------------

스프링 프레임워크. 스프링 학습내용
1. DI(클래스 등록, 사용법)
2. AOP
3. Spring MVC
4. Spring Data(Jdbc)
5. Spring Boot
-----------------------------------------------------------------------------------------

Maven Project 생성법
1. Java Project 생성 -> Convert to Maven Project
2. Maven Project 생성
pom.xml 작성(Project Object Model)

Maven : Build Tool - 라이브러리 자동다운로드(의존성 관리), 컴파일, 패키징, 테스트를 자동화
Maven 상위 : Gradle


Group ID : 현재 프로젝트의 상위 프로젝트 명. (회사이름, 부서이름) >> 어디까지나 추상적인 이름
Artifact ID : 작업 프로젝트명
-----------------------------------------------------------------------------------------
mvnrepository
spring종속성
-----------------------------------------------------------------------------------------
<bean id="hb" class="sp0424.bean.HelloBean"> >> hb는 검색할 때 사용

서블릿 프로젝트에서 오류발생시 마지막 Caused By... 읽으면 해결책이 보임
스프링 프로젝트에서 오류발생시 Exception 첫 메세지 읽으면 해결책이 보임 

-----------------------------------------------------------------------------------------
스프링 DI (Dependency Injection)
-----------------------------------------------------------------------------------------
<property name="name" value="홍길동"></property>  에서 value는 변수, ref는 다른bean의 id값
-----------------------------------------------------------------------------------------

My Logger ml = new MyLogger();
My Logger ml = new MyFileLogger(); // MyFileLogger는 MyLogger의 자식이어야 한다.
My Logger ml = new MyDBMSLogger(); // MyDBMSLogger는 MyLogger의 자식이어야 한다.
부모 m= new 자식()
>> 다형성을 이용한다!

-----------------------------------------------------------------------------------------

class A{}
class B extends A{}

interface I{
	public void P();
}

class X implements I{
	public void p(){...}
}
I i1 = new X();
-----------------------------------------------------------------------------------------
property : setting용. 
property name : setxxx()에서 변수 이름을 이야기. value는 setxxx()의 매개변수.

bean >> VO, DTO는 등록 안 함
-----------------------------------------------------------------------------------------
init-method : 생성자메서드 이후에 initMethod() 실행.

lazy-init="true" >> 나중에 new로 검색할 때 그 때 초기화해주는 옵션.

-----------------------------------------------------------------------------------------
singleton : 하나만 생성, 주소 계속 사용
prototype > 새로 생성할 때마다 시간이 걸림. 메모리 필요.
-----------------------------------------------------------------------------------------
ClassPathXmlApplicationContext : 객체를 담는 컨테이너
-----------------------------------------------------------------------------------------
context: 접두어 사용 >> namespace에서 context 활성화 이후 사용 가능
context:component-scan : 일일이 bean 등록을 하는 대신 annotation을 찾아서 특정 innotation을 만나면 자동으로 bean 생성.
	base-package="" >> annotation을 찾을 경로
-----------------------------------------------------------------------------------------
DI : 객체 주입
SetName()의 매개변수값을 주입하는 것.
여기서 값은 숫자, 문자, bool타입이 아닌 객체형태 매개변수값을 집어넣는 형태.

변수나 메서드에 선언함.
- @Autowired : 타입기반 자동주입 기능. 자식타입이 여러개 있으면 오류뜬다.
이름으로 주입하려면 @Qualifier(name="")을 이용한다.
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------




